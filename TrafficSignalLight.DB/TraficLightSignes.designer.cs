#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrafficSignalLight.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TraficLightSignes")]
	public partial class TraficLightSignesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertTemplatePattern(TemplatePattern instance);
    partial void UpdateTemplatePattern(TemplatePattern instance);
    partial void DeleteTemplatePattern(TemplatePattern instance);
    partial void InsertGovernerate(Governerate instance);
    partial void UpdateGovernerate(Governerate instance);
    partial void DeleteGovernerate(Governerate instance);
    partial void InsertLightPattern(LightPattern instance);
    partial void UpdateLightPattern(LightPattern instance);
    partial void DeleteLightPattern(LightPattern instance);
    partial void InsertSigneControlBox(SigneControlBox instance);
    partial void UpdateSigneControlBox(SigneControlBox instance);
    partial void DeleteSigneControlBox(SigneControlBox instance);
    partial void InsertSignTemplate(SignTemplate instance);
    partial void UpdateSignTemplate(SignTemplate instance);
    partial void DeleteSignTemplate(SignTemplate instance);
    partial void InsertTemplate(Template instance);
    partial void UpdateTemplate(Template instance);
    partial void DeleteTemplate(Template instance);
    #endregion
		
		public TraficLightSignesDataContext() : 
				base(global::TrafficSignalLight.DB.Properties.Settings.Default.TraficLightSignesConnectionString, mappingSource)
		{
			this.DeferredLoadingEnabled = false;
			OnCreated();
		}
		
		public TraficLightSignesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TraficLightSignesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TraficLightSignesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TraficLightSignesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<TemplatePattern> TemplatePatterns
		{
			get
			{
				return this.GetTable<TemplatePattern>();
			}
		}
		
		public System.Data.Linq.Table<Governerate> Governerates
		{
			get
			{
				return this.GetTable<Governerate>();
			}
		}
		
		public System.Data.Linq.Table<LightPattern> LightPatterns
		{
			get
			{
				return this.GetTable<LightPattern>();
			}
		}
		
		public System.Data.Linq.Table<SigneControlBox> SigneControlBoxes
		{
			get
			{
				return this.GetTable<SigneControlBox>();
			}
		}
		
		public System.Data.Linq.Table<SignTemplate> SignTemplates
		{
			get
			{
				return this.GetTable<SignTemplate>();
			}
		}
		
		public System.Data.Linq.Table<Template> Templates
		{
			get
			{
				return this.GetTable<Template>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Area")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GovernorateID;
		
		private string _Name;
		
		private string _Longitude;
		
		private string _Latitude;
		
		private EntitySet<SigneControlBox> _SigneControlBoxes;
		
		private EntityRef<Governerate> _Governerate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGovernorateIDChanging(int value);
    partial void OnGovernorateIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    #endregion
		
		public Area()
		{
			this._SigneControlBoxes = new EntitySet<SigneControlBox>(new Action<SigneControlBox>(this.attach_SigneControlBoxes), new Action<SigneControlBox>(this.detach_SigneControlBoxes));
			this._Governerate = default(EntityRef<Governerate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GovernorateID", DbType="Int NOT NULL")]
		public int GovernorateID
		{
			get
			{
				return this._GovernorateID;
			}
			set
			{
				if ((this._GovernorateID != value))
				{
					if (this._Governerate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGovernorateIDChanging(value);
					this.SendPropertyChanging();
					this._GovernorateID = value;
					this.SendPropertyChanged("GovernorateID");
					this.OnGovernorateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="NVarChar(15)")]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="NVarChar(15)")]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_SigneControlBox", Storage="_SigneControlBoxes", ThisKey="ID", OtherKey="AreaID")]
		public EntitySet<SigneControlBox> SigneControlBoxes
		{
			get
			{
				return this._SigneControlBoxes;
			}
			set
			{
				this._SigneControlBoxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Governerate_Area", Storage="_Governerate", ThisKey="GovernorateID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Governerate Governerate
		{
			get
			{
				return this._Governerate.Entity;
			}
			set
			{
				Governerate previousValue = this._Governerate.Entity;
				if (((previousValue != value) 
							|| (this._Governerate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Governerate.Entity = null;
						previousValue.Areas.Remove(this);
					}
					this._Governerate.Entity = value;
					if ((value != null))
					{
						value.Areas.Add(this);
						this._GovernorateID = value.ID;
					}
					else
					{
						this._GovernorateID = default(int);
					}
					this.SendPropertyChanged("Governerate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SigneControlBoxes(SigneControlBox entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_SigneControlBoxes(SigneControlBox entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplatePattern")]
	public partial class TemplatePattern : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TemplateID;
		
		private int _PetternID;
		
		private System.TimeSpan _StartFrom;
		
		private System.TimeSpan _FinishBy;
		
		private EntityRef<LightPattern> _LightPattern;
		
		private EntityRef<Template> _Template;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTemplateIDChanging(int value);
    partial void OnTemplateIDChanged();
    partial void OnPetternIDChanging(int value);
    partial void OnPetternIDChanged();
    partial void OnStartFromChanging(System.TimeSpan value);
    partial void OnStartFromChanged();
    partial void OnFinishByChanging(System.TimeSpan value);
    partial void OnFinishByChanged();
    #endregion
		
		public TemplatePattern()
		{
			this._LightPattern = default(EntityRef<LightPattern>);
			this._Template = default(EntityRef<Template>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateID", DbType="Int NOT NULL")]
		public int TemplateID
		{
			get
			{
				return this._TemplateID;
			}
			set
			{
				if ((this._TemplateID != value))
				{
					if (this._Template.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._TemplateID = value;
					this.SendPropertyChanged("TemplateID");
					this.OnTemplateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetternID", DbType="Int NOT NULL")]
		public int PetternID
		{
			get
			{
				return this._PetternID;
			}
			set
			{
				if ((this._PetternID != value))
				{
					if (this._LightPattern.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPetternIDChanging(value);
					this.SendPropertyChanging();
					this._PetternID = value;
					this.SendPropertyChanged("PetternID");
					this.OnPetternIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartFrom", DbType="Time NOT NULL")]
		public System.TimeSpan StartFrom
		{
			get
			{
				return this._StartFrom;
			}
			set
			{
				if ((this._StartFrom != value))
				{
					this.OnStartFromChanging(value);
					this.SendPropertyChanging();
					this._StartFrom = value;
					this.SendPropertyChanged("StartFrom");
					this.OnStartFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishBy", DbType="Time NOT NULL")]
		public System.TimeSpan FinishBy
		{
			get
			{
				return this._FinishBy;
			}
			set
			{
				if ((this._FinishBy != value))
				{
					this.OnFinishByChanging(value);
					this.SendPropertyChanging();
					this._FinishBy = value;
					this.SendPropertyChanged("FinishBy");
					this.OnFinishByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LightPattern_TemplatePattern", Storage="_LightPattern", ThisKey="PetternID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LightPattern LightPattern
		{
			get
			{
				return this._LightPattern.Entity;
			}
			set
			{
				LightPattern previousValue = this._LightPattern.Entity;
				if (((previousValue != value) 
							|| (this._LightPattern.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LightPattern.Entity = null;
						previousValue.TemplatePatterns.Remove(this);
					}
					this._LightPattern.Entity = value;
					if ((value != null))
					{
						value.TemplatePatterns.Add(this);
						this._PetternID = value.ID;
					}
					else
					{
						this._PetternID = default(int);
					}
					this.SendPropertyChanged("LightPattern");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_TemplatePattern", Storage="_Template", ThisKey="TemplateID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Template Template
		{
			get
			{
				return this._Template.Entity;
			}
			set
			{
				Template previousValue = this._Template.Entity;
				if (((previousValue != value) 
							|| (this._Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Template.Entity = null;
						previousValue.TemplatePatterns.Remove(this);
					}
					this._Template.Entity = value;
					if ((value != null))
					{
						value.TemplatePatterns.Add(this);
						this._TemplateID = value.ID;
					}
					else
					{
						this._TemplateID = default(int);
					}
					this.SendPropertyChanged("Template");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Governerate")]
	public partial class Governerate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Longitude;
		
		private string _Latitude;
		
		private EntitySet<Area> _Areas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    #endregion
		
		public Governerate()
		{
			this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="NVarChar(15)")]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="NVarChar(15)")]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Governerate_Area", Storage="_Areas", ThisKey="ID", OtherKey="GovernorateID")]
		public EntitySet<Area> Areas
		{
			get
			{
				return this._Areas;
			}
			set
			{
				this._Areas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.Governerate = this;
		}
		
		private void detach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.Governerate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LightPattern")]
	public partial class LightPattern : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _Red;
		
		private int _Green;
		
		private int _Amber;
		
		private bool _GreenAmberOverlab;
		
		private int _Pedstrain;
		
		private bool _ShowSigneCounter;
		
		private bool _ShowPedstrainCounter;
		
		private EntitySet<TemplatePattern> _TemplatePatterns;
		
		private EntitySet<SignTemplate> _SignTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRedChanging(int value);
    partial void OnRedChanged();
    partial void OnGreenChanging(int value);
    partial void OnGreenChanged();
    partial void OnAmberChanging(int value);
    partial void OnAmberChanged();
    partial void OnGreenAmberOverlabChanging(bool value);
    partial void OnGreenAmberOverlabChanged();
    partial void OnPedstrainChanging(int value);
    partial void OnPedstrainChanged();
    partial void OnShowSigneCounterChanging(bool value);
    partial void OnShowSigneCounterChanged();
    partial void OnShowPedstrainCounterChanging(bool value);
    partial void OnShowPedstrainCounterChanged();
    #endregion
		
		public LightPattern()
		{
			this._TemplatePatterns = new EntitySet<TemplatePattern>(new Action<TemplatePattern>(this.attach_TemplatePatterns), new Action<TemplatePattern>(this.detach_TemplatePatterns));
			this._SignTemplates = new EntitySet<SignTemplate>(new Action<SignTemplate>(this.attach_SignTemplates), new Action<SignTemplate>(this.detach_SignTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Red", DbType="Int NOT NULL")]
		public int Red
		{
			get
			{
				return this._Red;
			}
			set
			{
				if ((this._Red != value))
				{
					this.OnRedChanging(value);
					this.SendPropertyChanging();
					this._Red = value;
					this.SendPropertyChanged("Red");
					this.OnRedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Green", DbType="Int NOT NULL")]
		public int Green
		{
			get
			{
				return this._Green;
			}
			set
			{
				if ((this._Green != value))
				{
					this.OnGreenChanging(value);
					this.SendPropertyChanging();
					this._Green = value;
					this.SendPropertyChanged("Green");
					this.OnGreenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amber", DbType="Int NOT NULL")]
		public int Amber
		{
			get
			{
				return this._Amber;
			}
			set
			{
				if ((this._Amber != value))
				{
					this.OnAmberChanging(value);
					this.SendPropertyChanging();
					this._Amber = value;
					this.SendPropertyChanged("Amber");
					this.OnAmberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GreenAmberOverlab", DbType="Bit NOT NULL")]
		public bool GreenAmberOverlab
		{
			get
			{
				return this._GreenAmberOverlab;
			}
			set
			{
				if ((this._GreenAmberOverlab != value))
				{
					this.OnGreenAmberOverlabChanging(value);
					this.SendPropertyChanging();
					this._GreenAmberOverlab = value;
					this.SendPropertyChanged("GreenAmberOverlab");
					this.OnGreenAmberOverlabChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pedstrain", DbType="Int NOT NULL")]
		public int Pedstrain
		{
			get
			{
				return this._Pedstrain;
			}
			set
			{
				if ((this._Pedstrain != value))
				{
					this.OnPedstrainChanging(value);
					this.SendPropertyChanging();
					this._Pedstrain = value;
					this.SendPropertyChanged("Pedstrain");
					this.OnPedstrainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowSigneCounter", DbType="Bit NOT NULL")]
		public bool ShowSigneCounter
		{
			get
			{
				return this._ShowSigneCounter;
			}
			set
			{
				if ((this._ShowSigneCounter != value))
				{
					this.OnShowSigneCounterChanging(value);
					this.SendPropertyChanging();
					this._ShowSigneCounter = value;
					this.SendPropertyChanged("ShowSigneCounter");
					this.OnShowSigneCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowPedstrainCounter", DbType="Bit NOT NULL")]
		public bool ShowPedstrainCounter
		{
			get
			{
				return this._ShowPedstrainCounter;
			}
			set
			{
				if ((this._ShowPedstrainCounter != value))
				{
					this.OnShowPedstrainCounterChanging(value);
					this.SendPropertyChanging();
					this._ShowPedstrainCounter = value;
					this.SendPropertyChanged("ShowPedstrainCounter");
					this.OnShowPedstrainCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LightPattern_TemplatePattern", Storage="_TemplatePatterns", ThisKey="ID", OtherKey="PetternID")]
		public EntitySet<TemplatePattern> TemplatePatterns
		{
			get
			{
				return this._TemplatePatterns;
			}
			set
			{
				this._TemplatePatterns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LightPattern_SignTemplate", Storage="_SignTemplates", ThisKey="ID", OtherKey="TemplateID")]
		public EntitySet<SignTemplate> SignTemplates
		{
			get
			{
				return this._SignTemplates;
			}
			set
			{
				this._SignTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TemplatePatterns(TemplatePattern entity)
		{
			this.SendPropertyChanging();
			entity.LightPattern = this;
		}
		
		private void detach_TemplatePatterns(TemplatePattern entity)
		{
			this.SendPropertyChanging();
			entity.LightPattern = null;
		}
		
		private void attach_SignTemplates(SignTemplate entity)
		{
			this.SendPropertyChanging();
			entity.LightPattern = this;
		}
		
		private void detach_SignTemplates(SignTemplate entity)
		{
			this.SendPropertyChanging();
			entity.LightPattern = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SigneControlBox")]
	public partial class SigneControlBox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AreaID;
		
		private int _LightPatternID;
		
		private string _IPAddress;
		
		private string _Name;
		
		private string _Address;
		
		private string _Longitude;
		
		private string _Latitude;
		
		private EntitySet<SignTemplate> _SignTemplates;
		
		private EntityRef<Area> _Area;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAreaIDChanging(int value);
    partial void OnAreaIDChanged();
    partial void OnLightPatternIDChanging(int value);
    partial void OnLightPatternIDChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    #endregion
		
		public SigneControlBox()
		{
			this._SignTemplates = new EntitySet<SignTemplate>(new Action<SignTemplate>(this.attach_SignTemplates), new Action<SignTemplate>(this.detach_SignTemplates));
			this._Area = default(EntityRef<Area>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="Int NOT NULL")]
		public int AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LightPatternID", DbType="Int NOT NULL")]
		public int LightPatternID
		{
			get
			{
				return this._LightPatternID;
			}
			set
			{
				if ((this._LightPatternID != value))
				{
					this.OnLightPatternIDChanging(value);
					this.SendPropertyChanging();
					this._LightPatternID = value;
					this.SendPropertyChanged("LightPatternID");
					this.OnLightPatternIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="NChar(50)")]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="NChar(50)")]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SigneControlBox_SignTemplate", Storage="_SignTemplates", ThisKey="ID", OtherKey="SignID")]
		public EntitySet<SignTemplate> SignTemplates
		{
			get
			{
				return this._SignTemplates;
			}
			set
			{
				this._SignTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_SigneControlBox", Storage="_Area", ThisKey="AreaID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.SigneControlBoxes.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.SigneControlBoxes.Add(this);
						this._AreaID = value.ID;
					}
					else
					{
						this._AreaID = default(int);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SignTemplates(SignTemplate entity)
		{
			this.SendPropertyChanging();
			entity.SigneControlBox = this;
		}
		
		private void detach_SignTemplates(SignTemplate entity)
		{
			this.SendPropertyChanging();
			entity.SigneControlBox = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignTemplate")]
	public partial class SignTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SignID;
		
		private int _TemplateID;
		
		private EntityRef<SigneControlBox> _SigneControlBox;
		
		private EntityRef<LightPattern> _LightPattern;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSignIDChanging(int value);
    partial void OnSignIDChanged();
    partial void OnTemplateIDChanging(int value);
    partial void OnTemplateIDChanged();
    #endregion
		
		public SignTemplate()
		{
			this._SigneControlBox = default(EntityRef<SigneControlBox>);
			this._LightPattern = default(EntityRef<LightPattern>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignID", DbType="Int NOT NULL")]
		public int SignID
		{
			get
			{
				return this._SignID;
			}
			set
			{
				if ((this._SignID != value))
				{
					if (this._SigneControlBox.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignIDChanging(value);
					this.SendPropertyChanging();
					this._SignID = value;
					this.SendPropertyChanged("SignID");
					this.OnSignIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateID", DbType="Int NOT NULL")]
		public int TemplateID
		{
			get
			{
				return this._TemplateID;
			}
			set
			{
				if ((this._TemplateID != value))
				{
					if (this._LightPattern.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._TemplateID = value;
					this.SendPropertyChanged("TemplateID");
					this.OnTemplateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SigneControlBox_SignTemplate", Storage="_SigneControlBox", ThisKey="SignID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SigneControlBox SigneControlBox
		{
			get
			{
				return this._SigneControlBox.Entity;
			}
			set
			{
				SigneControlBox previousValue = this._SigneControlBox.Entity;
				if (((previousValue != value) 
							|| (this._SigneControlBox.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SigneControlBox.Entity = null;
						previousValue.SignTemplates.Remove(this);
					}
					this._SigneControlBox.Entity = value;
					if ((value != null))
					{
						value.SignTemplates.Add(this);
						this._SignID = value.ID;
					}
					else
					{
						this._SignID = default(int);
					}
					this.SendPropertyChanged("SigneControlBox");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LightPattern_SignTemplate", Storage="_LightPattern", ThisKey="TemplateID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LightPattern LightPattern
		{
			get
			{
				return this._LightPattern.Entity;
			}
			set
			{
				LightPattern previousValue = this._LightPattern.Entity;
				if (((previousValue != value) 
							|| (this._LightPattern.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LightPattern.Entity = null;
						previousValue.SignTemplates.Remove(this);
					}
					this._LightPattern.Entity = value;
					if ((value != null))
					{
						value.SignTemplates.Add(this);
						this._TemplateID = value.ID;
					}
					else
					{
						this._TemplateID = default(int);
					}
					this.SendPropertyChanged("LightPattern");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Template")]
	public partial class Template : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<TemplatePattern> _TemplatePatterns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Template()
		{
			this._TemplatePatterns = new EntitySet<TemplatePattern>(new Action<TemplatePattern>(this.attach_TemplatePatterns), new Action<TemplatePattern>(this.detach_TemplatePatterns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_TemplatePattern", Storage="_TemplatePatterns", ThisKey="ID", OtherKey="TemplateID")]
		public EntitySet<TemplatePattern> TemplatePatterns
		{
			get
			{
				return this._TemplatePatterns;
			}
			set
			{
				this._TemplatePatterns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TemplatePatterns(TemplatePattern entity)
		{
			this.SendPropertyChanging();
			entity.Template = this;
		}
		
		private void detach_TemplatePatterns(TemplatePattern entity)
		{
			this.SendPropertyChanging();
			entity.Template = null;
		}
	}
}
#pragma warning restore 1591
